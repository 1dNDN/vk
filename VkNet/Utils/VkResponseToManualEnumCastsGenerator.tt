<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="VkNet" #>
<#@ import namespace="VkNet.Utils" #>
<#@ assembly name="$(TargetPath)" #>
<#@ output extension=".cs" #>
// Autogenerated at <#= DateTime.Now.ToString(CultureInfo.InvariantCulture) #>
// DO NOT EDIT THIS FILE CAUSE ALL CHANGES WILL BE DELETED AUTOMATICALLY
using VkNet.Enums;

namespace VkNet.Utils
{
	public partial class VkResponse
	{
<#
	var safetyEnumTypes = Assembly.GetAssembly(typeof(VkApi))	// Получить сборку
		.GetTypes()												// Получить типы сборки
		.Where(
			t => t.IsEnum										// Получить все перечисления
			&& t.Namespace.StartsWith("VkNet")					// В пространстве имен начинающихся с VkNet
		).OrderBy(o => o.Name);
	foreach (var type in safetyEnumTypes)
	{
		var fields = type.GetFields().Skip(1);
		var value = fields.Any(o => o.CustomAttributes.Any(a => a.AttributeType.Name == typeof(DefaultValueAttribute).Name)) ? // Проверить что есть значение по умолчанию
			fields.FirstOrDefault(o => o.CustomAttributes.Any(a => a.AttributeType.Name == typeof(DefaultValueAttribute).Name)).Name : // Значение по умолчанию
			fields.FirstOrDefault().Name; // Значение первого элемента
#>

		public static implicit operator <#= type.Name #>(VkResponse response)
		{
			if (response == null) {
				return <#= type.Name #>.<#= value #>;
			}

			return Utilities.EnumFrom<<#= type.Name #>>(response);
		}
<#
	}
#>
	}
}