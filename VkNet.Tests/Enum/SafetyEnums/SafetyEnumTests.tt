<#@ template language="C#" debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="$(SolutionDir)Debug\VkNet.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="VkNet" #>
<#@ import namespace="VkNet.Enums.Filters" #>
<#@ import namespace="VkNet.Enums.SafetyEnums" #>
using NUnit.Framework;
using VkNet.Enums.SafetyEnums;

namespace VkNet.Tests.Enum.SafetyEnums
{
	[TestFixture]
    public class SafetyEnumsTest
    {

<#
	var safetyEnumTypes = Assembly.GetAssembly(typeof(VkApi))
		.GetTypes()
		.Where(
			t => t.BaseType != null
				&& t.BaseType.Name == typeof(SafetyEnum<>).Name
				&& t.Name != typeof(MultivaluedFilter<>).Name
		);
	foreach (var type in safetyEnumTypes)
	{

#>
		[Test]
        public void <#=type.Name #>Test()
        {
<#GenerateTest(type);#>
		}

<#
	}
#>
	}
}

<#+

	public void GenerateTest(Type type)
	{
		foreach (var info in type.GetFields()) {
#>
			Assert.That(<#= type.Name#>.<#= info.Name#>.ToString(), Is.EqualTo("<#= info.GetValue(info).ToString()#>"));
<#+
		}
	}

#>